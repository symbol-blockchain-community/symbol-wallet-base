/* tslint:disable */
/* eslint-disable */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime.js';
import type { BalanceChangeReceiptDTO } from './BalanceChangeReceiptDTO.js';
import {
    BalanceChangeReceiptDTOFromJSON,
    BalanceChangeReceiptDTOFromJSONTyped,
    BalanceChangeReceiptDTOToJSON,
} from './BalanceChangeReceiptDTO.js';
import type { BalanceTransferReceiptDTO } from './BalanceTransferReceiptDTO.js';
import {
    BalanceTransferReceiptDTOFromJSON,
    BalanceTransferReceiptDTOFromJSONTyped,
    BalanceTransferReceiptDTOToJSON,
} from './BalanceTransferReceiptDTO.js';
import type { InflationReceiptDTO } from './InflationReceiptDTO.js';
import {
    InflationReceiptDTOFromJSON,
    InflationReceiptDTOFromJSONTyped,
    InflationReceiptDTOToJSON,
} from './InflationReceiptDTO.js';
import type { MosaicExpiryReceiptDTO } from './MosaicExpiryReceiptDTO.js';
import {
    MosaicExpiryReceiptDTOFromJSON,
    MosaicExpiryReceiptDTOFromJSONTyped,
    MosaicExpiryReceiptDTOToJSON,
} from './MosaicExpiryReceiptDTO.js';
import type { NamespaceExpiryReceiptDTO } from './NamespaceExpiryReceiptDTO.js';
import {
    NamespaceExpiryReceiptDTOFromJSON,
    NamespaceExpiryReceiptDTOFromJSONTyped,
    NamespaceExpiryReceiptDTOToJSON,
} from './NamespaceExpiryReceiptDTO.js';
import type { ReceiptTypeEnum } from './ReceiptTypeEnum.js';
import {
    ReceiptTypeEnumFromJSON,
    ReceiptTypeEnumFromJSONTyped,
    ReceiptTypeEnumToJSON,
} from './ReceiptTypeEnum.js';

/**
 * 
 * @export
 * @interface TransactionStatementDTOReceiptsInner
 */
export interface TransactionStatementDTOReceiptsInner {
    /**
     * Version of the receipt.
     * @type {number}
     * @memberof TransactionStatementDTOReceiptsInner
     */
    version: number;
    /**
     * 
     * @type {ReceiptTypeEnum}
     * @memberof TransactionStatementDTOReceiptsInner
     */
    type: ReceiptTypeEnum;
    /**
     * Mosaic identifier.
     * @type {string}
     * @memberof TransactionStatementDTOReceiptsInner
     */
    mosaicId: string;
    /**
     * Absolute amount. An amount of 123456789 (absolute) for a mosaic with divisibility 6 means 123.456789 (relative).
     * @type {string}
     * @memberof TransactionStatementDTOReceiptsInner
     */
    amount: string;
    /**
     * Address encoded using a 32-character set.
     * @type {string}
     * @memberof TransactionStatementDTOReceiptsInner
     */
    senderAddress: string;
    /**
     * Address encoded using a 32-character set.
     * @type {string}
     * @memberof TransactionStatementDTOReceiptsInner
     */
    recipientAddress: string;
    /**
     * Address encoded using a 32-character set.
     * @type {string}
     * @memberof TransactionStatementDTOReceiptsInner
     */
    targetAddress: string;
    /**
     * Mosaic identifier.
     * @type {string}
     * @memberof TransactionStatementDTOReceiptsInner
     */
    artifactId: string;
}

/**
 * Check if a given object implements the TransactionStatementDTOReceiptsInner interface.
 */
export function instanceOfTransactionStatementDTOReceiptsInner(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "version" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "mosaicId" in value;
    isInstance = isInstance && "amount" in value;
    isInstance = isInstance && "senderAddress" in value;
    isInstance = isInstance && "recipientAddress" in value;
    isInstance = isInstance && "targetAddress" in value;
    isInstance = isInstance && "artifactId" in value;

    return isInstance;
}

export function TransactionStatementDTOReceiptsInnerFromJSON(json: any): TransactionStatementDTOReceiptsInner {
    return TransactionStatementDTOReceiptsInnerFromJSONTyped(json, false);
}

export function TransactionStatementDTOReceiptsInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionStatementDTOReceiptsInner {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'version': json['version'],
        'type': ReceiptTypeEnumFromJSON(json['type']),
        'mosaicId': json['mosaicId'],
        'amount': json['amount'],
        'senderAddress': json['senderAddress'],
        'recipientAddress': json['recipientAddress'],
        'targetAddress': json['targetAddress'],
        'artifactId': json['artifactId'],
    };
}

export function TransactionStatementDTOReceiptsInnerToJSON(value?: TransactionStatementDTOReceiptsInner | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'version': value.version,
        'type': ReceiptTypeEnumToJSON(value.type),
        'mosaicId': value.mosaicId,
        'amount': value.amount,
        'senderAddress': value.senderAddress,
        'recipientAddress': value.recipientAddress,
        'targetAddress': value.targetAddress,
        'artifactId': value.artifactId,
    };
}

